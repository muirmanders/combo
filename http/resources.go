// Code generated by go-bindata.
// sources:
// http/resources/combo.css
// http/resources/combo.html
// http/resources/combo.js
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _comboCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x08\x14\xbb\x04\x50\x9a\x14\xc8\x61\xde\x69\x28\x7a\x28\xb0\xec\xb2\xed\x03\x64\x89\xb1\x89\xc8\x52\x20\xc9\x4e\xd2\xa2\xff\x3e\xd2\x76\xba\x74\xab\x37\xec\x64\x99\x8f\x4f\x7c\xef\x89\xb7\x8b\x02\x16\x70\x1f\x0e\xe7\x48\x75\x93\xe1\x6e\xb5\xde\xc0\xb6\xa3\x08\x5b\xed\x2d\xc6\xb4\x04\xf8\xec\x1c\x0c\x68\x82\x88\x09\x63\x8f\x76\x29\xac\x1f\x09\x21\xec\x20\x37\x94\x20\x85\x2e\x1a\x04\x13\x2c\x02\xff\xd6\xa1\xc7\xe8\xd1\x42\x75\x06\x0d\xdb\xc7\xef\x2a\xe5\xb3\x43\x61\x39\x32\xe8\x99\x99\x1b\x9d\xc1\x68\x0f\x15\xc2\x2e\x74\xde\x02\x79\x2e\x22\x7c\x79\xbc\x7f\xf8\xfa\xed\x01\x76\xe4\x50\xe6\xdc\x16\x0b\x78\x2e\x00\xaa\x70\x52\x89\x9e\xc8\xd7\x25\x9f\x23\x8b\x53\x5c\xfa\xc4\x88\x3a\x62\xb5\xa7\xac\x72\xe8\x4c\xa3\x8c\x76\x2e\x74\xb9\x04\x1f\x3c\x5e\xc3\x1d\x6b\x57\x09\x1d\x9a\x6b\x70\xdf\xe4\xd6\xcd\x60\x6d\x78\x9a\x43\xd2\xfb\xc0\x3b\xc5\x97\xa2\xb8\xa9\x82\x8e\x76\x70\x71\x24\x9b\x9b\x12\x3e\x6e\xfa\x96\xbc\x30\x1a\x94\x68\xaf\x2b\xa3\xb9\x12\xd6\x87\x13\xe7\xea\x88\x53\x74\xda\xec\x05\xb2\x94\x0e\x4e\x9f\x4b\xd8\x39\x3c\xbd\x29\x5c\x4c\x5e\x00\xf9\x2a\x4b\x91\x85\x50\xf0\x25\xbf\x8c\xeb\x5a\x7f\x1d\xc7\x5c\x07\xeb\x5d\xc6\x70\x1c\xd4\x4a\x0f\x0b\xf9\x9d\x36\x95\x26\x2f\xeb\xd5\xea\xc3\xff\x88\x93\x01\x06\x79\xa9\xfe\x3d\xe1\x2f\x51\x54\xfc\xad\xa3\x2c\x8e\x62\xe5\x81\x9b\x4c\x13\xf8\xa4\xf3\xf0\x10\xbb\xe0\xb3\xac\x0b\x8a\xbe\x4b\xb2\x19\x4f\x59\x69\x47\xb5\xd8\x45\x9f\x31\x8e\x6a\x0e\x84\xbc\xbc\xcf\xaf\x03\x55\xd4\x96\xba\x54\xc2\x46\x9c\x49\xc7\xb1\xa1\x3c\x75\xfc\x31\x77\xc0\xe4\xfa\xe9\x7f\x92\x28\xb4\xe1\x38\x43\x7b\x75\xf2\xf6\x1a\xa1\xf5\xac\xd1\xf2\xf6\xf5\x73\x23\xeb\x88\x38\x3e\xd5\x4d\x8b\x29\xe9\x1a\xd3\x98\xe6\x2f\xd7\x77\xa3\xe9\x97\xe2\x67\x00\x00\x00\xff\xff\xa8\x42\xd6\x64\xe3\x03\x00\x00")

func comboCssBytes() ([]byte, error) {
	return bindataRead(
		_comboCss,
		"combo.css",
	)
}

func comboCss() (*asset, error) {
	bytes, err := comboCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.css", size: 995, mode: os.FileMode(420), modTime: time.Unix(1435112021, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _comboHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x91\xbd\x8e\xdb\x30\x10\x84\x7b\x3d\xc5\x46\xbd\xc8\xc8\x48\x9a\x80\x32\x10\x18\x2e\x0c\xc4\x69\x92\x3c\x00\x45\xae\xa4\x75\x28\x52\xe1\x52\x86\xf5\xf6\xa1\xa4\xc3\x1d\x0e\x57\x5c\x71\x15\x31\x33\x3b\x1f\xff\xd4\xa7\xaa\x2a\x4e\x61\x5a\x22\xf5\x43\x82\xc3\xe7\xfa\x2b\x5c\x67\x8a\x70\xd5\xde\x62\x64\x01\xf0\xdd\x39\xd8\x52\x86\x88\x8c\xf1\x8e\x56\x14\x7f\x18\x21\x74\x90\x06\x62\xe0\x30\x47\x83\x60\x82\x45\xc8\xb2\x0f\x77\x8c\x1e\x2d\xb4\x0b\x68\xb8\x5e\x7e\x57\x9c\x16\x87\x85\x23\x83\x3e\xd7\xd2\xa0\x13\x18\xed\xa1\x45\xe8\xc2\xec\x2d\x90\xcf\x26\xc2\x8f\xcb\xe9\xfc\xf3\xd7\x19\x3a\x72\x28\x8a\xaa\x3a\x16\x6a\x48\xa3\x5b\x17\xd4\xf6\x58\x00\x28\x47\xfe\x6f\x3e\x85\x6b\xca\x8d\xc9\x03\x62\x2a\x21\x2d\x13\x36\x65\xc2\x47\x92\x86\xb9\x84\x21\x62\xd7\x94\x26\x8c\x6d\x10\xab\xb1\x55\xd9\x44\x9a\x12\x70\x34\x4d\x39\xa4\x34\xf1\x37\x29\xf5\x4d\x3f\x44\x1f\x42\xef\x50\x4f\xc4\x22\x57\x36\x4f\x3a\x6a\x59\xde\xfe\xcd\x18\x17\x79\x10\xb5\xf8\xf2\x24\xc4\x48\x5e\xdc\x32\x51\xc9\x9d\xf7\x21\xf4\x4c\xb2\x16\xf5\x0b\xbd\x9a\xe9\xfd\x0d\xe4\x7e\xaf\x37\x33\x89\x92\xc3\xe3\x69\x0d\x95\xdc\x45\xa1\xe4\xfe\x72\xaa\x0d\x76\xd9\xa6\x2c\xdd\x81\x6c\x53\xb6\x41\x47\xbb\x12\xb2\xf1\x2a\x18\x91\x59\xf7\xc8\xcf\x99\x92\x7b\x39\xb3\xb6\xcf\xf8\x1f\x00\x00\xff\xff\x85\x2a\xb4\x5f\x32\x02\x00\x00")

func comboHtmlBytes() ([]byte, error) {
	return bindataRead(
		_comboHtml,
		"combo.html",
	)
}

func comboHtml() (*asset, error) {
	bytes, err := comboHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.html", size: 562, mode: os.FileMode(420), modTime: time.Unix(1434758159, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _comboJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\xdd\x6f\xe3\xb8\x11\x7f\xf7\x5f\xc1\xea\x82\x83\x84\xd8\xca\x5e\xd1\xc5\x1d\xec\xe4\x80\x22\xb8\x87\x2b\xba\xb7\x0f\xbb\x45\x1f\xd2\xc0\x90\x25\xda\x26\x22\x89\x2a\x49\xc5\x16\x76\xfd\xbf\x77\x86\x94\x44\x52\x1f\xf9\x00\x7a\x79\x88\xa5\x19\x72\x38\x1f\xbf\xf9\xa0\x6e\x6e\xc8\x3d\xaf\x1a\xc1\x0e\x47\x45\xfe\xfa\xe1\xa7\x8f\xe4\x53\xcd\x04\xf9\x94\x94\x19\x15\x32\x26\xe4\xef\x79\x4e\x34\x57\x12\x41\x25\x15\xcf\x34\x8b\x17\xb0\xeb\x5f\x92\x12\xbe\x27\xea\xc8\x24\x91\xbc\x16\x29\x25\x29\xcf\x28\x81\xd7\x03\x7f\xa6\xa2\xa4\x19\xd9\x35\x24\x21\x9f\x7e\xff\xba\x92\xaa\xc9\x29\xee\xca\x59\x4a\x4b\xd8\xa9\x8e\x89\x22\x69\x52\x92\x1d\x25\x7b\x5e\x97\x19\x61\x25\x10\x29\xf9\xe7\xef\xf7\xbf\xfd\xf1\xe5\x37\xb2\x67\x39\x8d\x17\x8b\xe7\x44\x80\xd8\x62\xc7\xc9\x1d\xf9\xb6\x20\xa4\x00\xd1\x72\x4d\xbe\x5d\x96\xf0\x22\xab\x9c\xa9\x6d\xc5\x68\x4a\xb7\x29\x08\x51\x6b\x52\xd6\x79\xbe\xb8\x6c\x16\x0b\xbd\x29\x66\x25\x2c\xd8\xf1\x44\x64\xb0\x7f\x5f\x97\xa9\x62\xbc\x0c\x4f\x2c\x53\xc7\x25\x39\x52\x34\x2b\xd2\x72\xf5\x39\x34\xcf\x25\xac\x7b\x78\x84\xfd\x44\x5b\x16\xeb\xa5\x40\xd3\xbf\x9b\x8e\x6a\x76\x02\xd9\x3c\xe8\xe5\x7b\x2e\x48\x88\x62\x1a\xa0\x7f\xd8\xc0\xcf\x6d\xc7\x26\xcd\xf5\xb5\x39\x86\x98\x43\x1e\x9a\xc7\xf6\x1c\x24\xe1\x26\xc1\x4f\x40\xb9\x0a\x83\xdb\x8c\x3d\x93\x34\x4f\xa4\xbc\x03\xda\xaf\x41\x64\xd6\xf4\xd2\xcf\x46\xfa\x19\xa4\x1b\x9d\xc8\xd9\x0a\xb7\xe2\x1f\xce\x8f\x23\x79\xc8\x03\x81\x71\xa2\x94\x08\x83\x2c\x51\xc9\xea\x1c\x2c\xc9\xd9\xa3\x34\x40\x69\x80\x52\x55\xb4\xcc\xbe\xf2\x10\x94\x88\xe2\x4c\xf0\xaa\x4a\x76\x39\x0d\xbb\x73\xc0\x11\x3c\xa7\x22\x29\x53\xba\x26\x01\x2b\x15\x80\x85\xa6\x2a\x58\xf6\xfc\x24\x4d\x69\x05\x11\x09\x62\xc5\x57\xc1\xf5\xf9\x3a\x80\xff\x8d\xe5\xa3\xcc\xb5\x8d\x09\x7d\xa6\xa5\x5a\x92\x9a\x59\x5b\xf0\xaf\x66\x70\x78\x72\x38\xe0\xe1\x71\x92\x65\xf7\x68\x09\xa8\x8a\x0a\xd1\x0c\xbd\xe3\x2c\x06\x7c\x25\xcf\x9c\x65\x44\x43\x82\xec\x01\x6c\x4f\x54\x90\xd3\x91\x96\xfa\xb8\x8a\x95\x07\x00\xa4\xe1\x02\xc0\x35\xe0\x8e\x34\xaf\x60\x51\xc6\x24\xda\x9c\x08\xe9\x9f\x6e\xd8\x71\x9a\xf3\x92\x86\x8e\x5f\x2c\xab\x4a\x04\xa8\x1e\x46\xbe\x2e\x06\x7f\x27\x19\x4b\x58\x1f\xfe\xe3\xcb\xe7\x3f\x62\xa9\x04\x28\xc0\xf6\x4d\xe8\x5a\xa8\x97\x16\xa0\x0d\xb8\x0a\xd1\xed\xb8\x50\xbb\x51\x1c\x10\xef\x1e\x0d\xe0\x20\x78\x01\xd4\xf3\x9a\x5c\xfb\x1e\x72\x43\x1b\x41\x24\x5f\x58\xd0\x04\xd1\x65\x39\x90\xab\x78\x2b\xf5\x2a\x44\xa0\x47\x93\x02\x27\x78\x53\xb2\xbc\xbc\x34\xee\x18\x25\x2c\xf9\xfe\x7d\x5e\x41\xbd\x22\x88\x3c\xb1\x17\xe7\xed\x12\xb5\xc9\xe1\x32\x2e\x2d\xcd\xbc\x03\x7a\x6d\xc8\x82\x1f\x74\x25\x30\x29\x75\xe9\x53\xbc\x4b\x7b\xfd\xbb\x71\x8a\x07\x40\xa2\xca\x93\x66\x5b\x50\x29\x93\x03\x75\x2b\x48\x21\x0f\x06\xa7\x90\x61\x3f\xb4\x7c\x09\xa9\xa5\xe8\x59\x69\xa6\x2b\x87\xc3\xf9\xdb\x93\x74\xf7\xdb\xa2\xd3\x15\x98\x5f\xba\x7a\x84\xcf\x1a\x49\x9a\x8b\xbb\x4c\x21\xc2\xa7\x92\x9e\xc8\xbf\xe9\xee\x0b\x07\x5c\xab\x30\x38\xc9\xf5\xcd\x4d\x40\xae\x49\xce\xd3\x04\xe5\xc6\x47\x2e\x15\xbc\x07\x37\x29\x2f\x4b\xcc\x47\x03\x4a\x80\x21\x2f\x27\xcc\xd0\x49\xd7\x25\x9c\x2e\x81\x05\x16\x4a\x8d\x56\x80\xb5\xa4\x66\x45\x8c\xe1\x68\xfd\x2a\x4f\x4c\xa5\x47\x12\xc2\xca\xb8\x05\x6e\x5f\xda\x12\x28\xec\x06\xc3\xeb\x85\x9b\x05\x48\xd2\x1b\x10\xcc\x7d\xcc\x76\x82\x26\x4f\x1b\x67\xe7\x21\x29\xe8\x16\x5b\xc7\x60\xfb\x20\x0e\xbd\xa4\xb8\x25\xf4\x12\x21\x18\xb1\x06\x57\x10\x59\x44\x85\xdf\x30\xb5\xe1\x01\x12\x4c\x89\x9a\x5e\xa6\x14\x40\xb4\x5c\xac\xab\x30\x62\xe3\x70\x69\xe6\x4b\xe9\x6c\x13\x19\x02\xb5\x45\x73\xfa\x64\x1e\xa6\xb1\x0e\xfb\xda\xfc\xd8\xc4\x31\x08\x58\xb7\xbf\x0b\x17\xd9\x97\xbe\xbe\x0c\x3b\xdb\xa0\x9d\x6d\x7c\x53\xa8\x10\xd0\x3a\xdc\x98\xf7\xe1\xe2\xa5\x84\x1a\x1e\xe7\xfc\x00\x50\xa2\x3b\xa9\x51\x45\xf4\x06\x30\x01\x60\x44\x3b\x61\x16\xcb\x18\x4a\x57\x9a\x8e\xa8\x16\xa8\x51\xaa\xdb\x33\xb6\xea\x8b\xdf\x13\x99\xe9\x5a\x0c\xba\x96\x89\x1c\xae\x8b\x73\x5a\x1e\xb0\x83\x31\xdb\xc1\x70\x71\x01\x8b\xed\xaa\x07\xf6\xd8\x1a\x8e\x3c\x2c\x7c\xc0\x2e\x62\x7c\x88\xcf\x88\xf5\x15\xaa\xda\x12\x1a\x87\xe0\x94\x99\x56\x80\x55\xf1\x01\x57\x3f\x76\xb9\xe5\x92\xa0\x20\x75\x7d\x79\xc8\x8b\xab\x5a\x1e\xc3\x02\xfa\x99\xad\x20\x53\x7d\xd9\x0e\x0e\x5e\x73\x9e\x1a\x10\x9c\x69\xc2\x9b\x12\x8c\xb1\xf2\xbf\x35\xf4\x96\xce\x1b\x3a\xd8\xd0\xd7\xa1\xbb\xf7\x9d\xa6\x1b\x5b\xb0\x7c\xe9\xf8\x38\xfd\xbf\x5f\x84\xb4\x78\xcf\x00\xb7\x36\x3d\x04\xd5\x49\x69\x7b\x16\xdb\x93\xd0\x9c\xe7\x3a\x8e\xdc\x81\xaa\x6e\x47\x06\xd0\x28\x56\xd6\x74\xd3\x83\xd3\xd1\xc4\x34\xd6\xe1\xd8\xa1\xa9\x7a\xee\xe8\x0a\x31\x2a\xd4\x67\xa1\x66\x8f\x67\x92\x59\xb6\x19\x50\x66\xd9\xa6\x69\x2c\xc9\xd8\x96\x97\xf6\xe4\x5c\x8c\xf7\x00\xd1\xfa\xc7\x6c\xd2\xf5\xfd\x75\xd1\xfd\x9c\xd2\xba\x7b\x86\x3d\x79\x5e\x5f\x8e\xfa\x06\x25\xa9\xda\x62\xb4\xb6\xaa\xa9\x74\xc8\x6c\x3a\x7a\xac\x71\xc5\x9a\x42\x67\x3b\x98\xbc\x09\x9e\x66\xed\x2c\x3e\x9d\x78\x1b\x23\x1e\x4c\x00\xef\xf4\xb8\xf7\x68\xde\x1a\x78\x6b\xe0\xcd\x7a\x01\xa1\x66\x3c\x61\x0a\xc0\xfb\x40\x36\x9e\x21\xda\x2c\x9e\x1e\x2e\x66\x00\x62\x03\x0b\x43\x63\x9a\xc3\xdc\x47\x78\x0d\xc5\xef\xcc\xa4\xc2\x29\x51\x71\xe9\xa6\x18\x86\x4b\x17\x36\x57\x9c\xa6\x02\xae\xf5\xc1\xe1\xcd\x7f\xe4\xf5\x4d\x6f\xe3\x54\xe5\x6b\xa5\x4c\x95\xbd\xce\x2d\xed\x12\xa8\x79\x50\xe0\x33\x7a\xfe\xbc\x0f\x03\x1c\x9f\xa3\x91\x8f\x3a\x30\x99\x44\x36\x78\xb2\xbb\xa7\x06\x23\xd7\x89\x4c\x6e\x75\x83\x44\x53\x3b\xa3\x8e\x89\x6c\x51\x5b\xb3\x55\xdf\x3e\x57\xdd\xba\xc0\xaf\x15\x8e\x04\x57\x2d\x84\xc2\x73\x92\xb3\x6c\xa5\xe7\x80\xc8\xd3\x2f\x70\x39\xce\xb4\xac\x6b\xcf\x28\x7a\xb7\xf3\xc1\x9b\x72\x84\x3c\xf2\x13\x0c\xe8\x29\x9e\xc3\xab\x24\x65\x0a\x2b\xc5\x87\xf8\xe7\x8f\xed\x58\x36\x2b\x6d\x35\x3a\xdb\x71\x9f\x31\xc9\xf3\x88\x99\xfb\xbb\x69\xef\xa5\xcd\x17\x42\x73\x98\x6c\x1c\x65\x5b\x57\xb3\x4c\x27\xf2\x1b\xce\x68\xcd\x7a\xfd\xa8\xc5\xcc\x91\x4e\xe1\x9a\x75\xe7\x64\xa2\x41\x0a\xf8\x0d\xb2\xbd\xc2\xe9\xff\x23\x55\x1e\xdd\xec\x86\xad\xd1\x48\x05\x67\x22\x73\xbc\x2b\x60\xc2\x14\x4a\xdf\x21\x35\x3a\xbc\xeb\x4f\x1b\xc7\xb5\x0e\xa3\xcb\xb0\x23\xdd\x3e\x01\x73\x5d\x96\xf1\x1c\x08\xd4\x57\x36\x4f\x9c\x54\x09\x1e\x15\xf6\x55\x12\xf4\x5c\x8e\x0b\x4a\x34\xb8\x6e\x09\xaa\x6a\x51\xbe\x7a\x55\xed\xfc\x56\x98\x92\xa8\xef\x48\xde\x95\x10\xff\x0a\x3f\x63\x67\x2e\xb2\xf8\x87\x97\xd9\xf4\x69\x40\xb4\xb7\x4e\x5d\xc0\x43\x10\x67\x1e\xa2\xa8\x2d\xd3\x48\x6a\x9f\x22\x0f\xc6\xfe\x76\xdb\xa2\x26\x61\x37\xd2\x66\x36\x45\x8b\xd7\xf3\xb3\xb7\xdc\xa4\xe1\xe4\x0e\xb2\x9a\x88\xc3\x64\x32\x0f\x6d\x72\xad\x7a\x35\x4b\xcc\xdf\x38\x2d\xad\x8e\xa3\xd4\x34\x3b\x86\xfe\x98\xaa\xef\x80\xa6\xb9\xda\xde\xfd\x61\x9e\xe3\xf4\x63\x1b\x25\x6c\xc2\x6a\xef\xf7\xcb\x96\x68\xda\xa6\x13\x2b\xbf\x7e\x0e\x55\xf4\xde\x36\xde\x45\x79\x0e\xe9\xcb\x85\x97\x1e\x6f\xf9\x22\x33\x05\x72\x97\x8b\x48\xf9\x4b\xe1\xb6\x93\x1e\xe3\x63\x8f\x14\x73\x75\xfb\xa7\x91\x7d\x1d\x7e\xa6\x01\xb7\x99\xfd\x4a\xf0\xbe\x9e\x34\x25\xe3\xe2\xa6\xc3\xbb\x03\x3f\x1c\x09\xf5\xd7\xb0\x2e\xea\xfd\x75\xa5\x8b\xb8\xa7\xc2\x0b\x7d\xb6\xb3\xeb\x4f\x00\xd3\xe5\xad\x3d\xe5\x0d\x57\xec\x8b\x33\xce\x0e\xbe\xca\x3e\xd1\x66\x7b\x84\xdb\x72\x4e\xc5\xc4\xa7\x91\xab\x30\xe3\x69\x5d\xe0\xe7\x89\x78\x0f\x4f\xb2\xbd\xaa\xb8\x74\x90\x90\xf1\x53\x19\x4e\x7f\xce\x40\xe7\x99\xaf\x17\xb0\xee\x1e\xbf\x4c\xff\x4a\xfe\xf6\x0b\xf9\xf1\x47\xe2\x53\x6f\xef\xc8\xc7\x9f\xad\x6b\xf5\x14\x36\xf3\xb1\x0a\x66\x30\x7f\xef\x0a\x24\xba\x51\x31\x9d\xc2\x37\x9e\xcc\x7e\xfb\x9a\x92\xb6\xf1\xf7\x0c\x27\xff\xde\x9b\x93\xde\xa8\xab\xff\xaf\x2f\xe6\x15\xc7\xcf\xec\xef\x50\x15\x43\x7f\x15\xce\x04\x3f\xde\xe1\xd5\x54\x33\x31\x8f\xbb\x75\xed\x57\xb3\x01\xf7\x7f\x01\x00\x00\xff\xff\xef\xca\x32\x13\xaf\x18\x00\x00")

func comboJsBytes() ([]byte, error) {
	return bindataRead(
		_comboJs,
		"combo.js",
	)
}

func comboJs() (*asset, error) {
	bytes, err := comboJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.js", size: 6319, mode: os.FileMode(420), modTime: time.Unix(1435152073, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"combo.css": comboCss,
	"combo.html": comboHtml,
	"combo.js": comboJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"combo.css": &bintree{comboCss, map[string]*bintree{
	}},
	"combo.html": &bintree{comboHtml, map[string]*bintree{
	}},
	"combo.js": &bintree{comboJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

