// Code generated by go-bindata.
// sources:
// http/resources/combo.css
// http/resources/combo.html
// http/resources/combo.js
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _comboCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x08\x14\xbb\x04\x50\x9a\x14\xc8\x61\xde\x69\x28\x7a\x28\xb0\xec\xb2\xed\x03\x64\x89\xb1\x89\xc8\x52\x20\xc9\x4e\xd2\xa2\xff\x3e\xd2\x76\xba\x74\xab\x37\xec\x64\x99\x8f\x4f\x7c\xef\x89\xb7\x8b\x02\x16\x70\x1f\x0e\xe7\x48\x75\x93\xe1\x6e\xb5\xde\xc0\xb6\xa3\x08\x5b\xed\x2d\xc6\xb4\x04\xf8\xec\x1c\x0c\x68\x82\x88\x09\x63\x8f\x76\x29\xac\x1f\x09\x21\xec\x20\x37\x94\x20\x85\x2e\x1a\x04\x13\x2c\x02\xff\xd6\xa1\xc7\xe8\xd1\x42\x75\x06\x0d\xdb\xc7\xef\x2a\xe5\xb3\x43\x61\x39\x32\xe8\x99\x99\x1b\x9d\xc1\x68\x0f\x15\xc2\x2e\x74\xde\x02\x79\x2e\x22\x7c\x79\xbc\x7f\xf8\xfa\xed\x01\x76\xe4\x50\xe6\xdc\x16\x0b\x78\x2e\x00\xaa\x70\x52\x89\x9e\xc8\xd7\x25\x9f\x23\x8b\x53\x5c\xfa\xc4\x88\x3a\x62\xb5\xa7\xac\x72\xe8\x4c\xa3\x8c\x76\x2e\x74\xb9\x04\x1f\x3c\x5e\xc3\x1d\x6b\x57\x09\x1d\x9a\x6b\x70\xdf\xe4\xd6\xcd\x60\x6d\x78\x9a\x43\xd2\xfb\xc0\x3b\xc5\x97\xa2\xb8\xa9\x82\x8e\x76\x70\x71\x24\x9b\x9b\x12\x3e\x6e\xfa\x96\xbc\x30\x1a\x94\x68\xaf\x2b\xa3\xb9\x12\xd6\x87\x13\xe7\xea\x88\x53\x74\xda\xec\x05\xb2\x94\x0e\x4e\x9f\x4b\xd8\x39\x3c\xbd\x29\x5c\x4c\x5e\x00\xf9\x2a\x4b\x91\x85\x50\xf0\x25\xbf\x8c\xeb\x5a\x7f\x1d\xc7\x5c\x07\xeb\x5d\xc6\x70\x1c\xd4\x4a\x0f\x0b\xf9\x9d\x36\x95\x26\x2f\xeb\xd5\xea\xc3\xff\x88\x93\x01\x06\x79\xa9\xfe\x3d\xe1\x2f\x51\x54\xfc\xad\xa3\x2c\x8e\x62\xe5\x81\x9b\x4c\x13\xf8\xa4\xf3\xf0\x10\xbb\xe0\xb3\xac\x0b\x8a\xbe\x4b\xb2\x19\x4f\x59\x69\x47\xb5\xd8\x45\x9f\x31\x8e\x6a\x0e\x84\xbc\xbc\xcf\xaf\x03\x55\xd4\x96\xba\x54\xc2\x46\x9c\x49\xc7\xb1\xa1\x3c\x75\xfc\x31\x77\xc0\xe4\xfa\xe9\x7f\x92\x28\xb4\xe1\x38\x43\x7b\x75\xf2\xf6\x1a\xa1\xf5\xac\xd1\xf2\xf6\xf5\x73\x23\xeb\x88\x38\x3e\xd5\x4d\x8b\x29\xe9\x1a\xd3\x98\xe6\x2f\xd7\x77\xa3\xe9\x97\xe2\x67\x00\x00\x00\xff\xff\xa8\x42\xd6\x64\xe3\x03\x00\x00")

func comboCssBytes() ([]byte, error) {
	return bindataRead(
		_comboCss,
		"combo.css",
	)
}

func comboCss() (*asset, error) {
	bytes, err := comboCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.css", size: 995, mode: os.FileMode(420), modTime: time.Unix(1435087569, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _comboHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x91\xbd\x8e\xdb\x30\x10\x84\x7b\x3d\xc5\x46\xbd\xc8\xc8\x48\x9a\x80\x32\x10\x18\x2e\x0c\xc4\x69\x92\x3c\x00\x45\xae\xa4\x75\x28\x52\xe1\x52\x86\xf5\xf6\xa1\xa4\xc3\x1d\x0e\x57\x5c\x71\x15\x31\x33\x3b\x1f\xff\xd4\xa7\xaa\x2a\x4e\x61\x5a\x22\xf5\x43\x82\xc3\xe7\xfa\x2b\x5c\x67\x8a\x70\xd5\xde\x62\x64\x01\xf0\xdd\x39\xd8\x52\x86\x88\x8c\xf1\x8e\x56\x14\x7f\x18\x21\x74\x90\x06\x62\xe0\x30\x47\x83\x60\x82\x45\xc8\xb2\x0f\x77\x8c\x1e\x2d\xb4\x0b\x68\xb8\x5e\x7e\x57\x9c\x16\x87\x85\x23\x83\x3e\xd7\xd2\xa0\x13\x18\xed\xa1\x45\xe8\xc2\xec\x2d\x90\xcf\x26\xc2\x8f\xcb\xe9\xfc\xf3\xd7\x19\x3a\x72\x28\x8a\xaa\x3a\x16\x6a\x48\xa3\x5b\x17\xd4\xf6\x58\x00\x28\x47\xfe\x6f\x3e\x85\x6b\xca\x8d\xc9\x03\x62\x2a\x21\x2d\x13\x36\x65\xc2\x47\x92\x86\xb9\x84\x21\x62\xd7\x94\x26\x8c\x6d\x10\xab\xb1\x55\xd9\x44\x9a\x12\x70\x34\x4d\x39\xa4\x34\xf1\x37\x29\xf5\x4d\x3f\x44\x1f\x42\xef\x50\x4f\xc4\x22\x57\x36\x4f\x3a\x6a\x59\xde\xfe\xcd\x18\x17\x79\x10\xb5\xf8\xf2\x24\xc4\x48\x5e\xdc\x32\x51\xc9\x9d\xf7\x21\xf4\x4c\xb2\x16\xf5\x0b\xbd\x9a\xe9\xfd\x0d\xe4\x7e\xaf\x37\x33\x89\x92\xc3\xe3\x69\x0d\x95\xdc\x45\xa1\xe4\xfe\x72\xaa\x0d\x76\xd9\xa6\x2c\xdd\x81\x6c\x53\xb6\x41\x47\xbb\x12\xb2\xf1\x2a\x18\x91\x59\xf7\xc8\xcf\x99\x92\x7b\x39\xb3\xb6\xcf\xf8\x1f\x00\x00\xff\xff\x85\x2a\xb4\x5f\x32\x02\x00\x00")

func comboHtmlBytes() ([]byte, error) {
	return bindataRead(
		_comboHtml,
		"combo.html",
	)
}

func comboHtml() (*asset, error) {
	bytes, err := comboHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.html", size: 562, mode: os.FileMode(420), modTime: time.Unix(1434754926, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _comboJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\x5f\x8f\xda\x46\x10\x7f\xe7\x53\x8c\x9c\x53\x64\xc4\x9d\x49\xab\x46\x89\x20\x17\xa9\x3a\xe5\x21\x55\x93\x3c\x24\x55\x1f\xae\x08\x19\x7b\x81\x55\x8c\x97\x7a\xd7\x80\x95\xf0\xdd\x3b\x33\x6b\x7b\xd7\xc6\x5c\x9b\x97\xbe\x80\x3d\xff\x76\x67\xe6\x37\x7f\x3c\x9d\xc2\x83\xda\x57\x85\xdc\x6c\x0d\xfc\xfc\xe2\xa7\x97\xf0\xa1\x94\x05\x7c\x88\xf3\x54\x14\x3a\x02\xf8\x35\xcb\x80\xb9\x1a\x0a\xa1\x45\x71\x10\x69\x34\x42\xad\x3f\xb4\x00\xb5\x06\xb3\x95\x1a\xb4\x2a\x8b\x44\x40\xa2\x52\x01\xf8\xba\x51\x07\x51\xe4\x22\x85\x55\x05\x31\x7c\x78\xff\xe5\x4e\x9b\x2a\x13\xa4\x95\xc9\x44\xe4\xa8\x69\xb6\xb1\x81\x24\xce\x61\x25\x60\xad\xca\x3c\x05\x99\x23\x51\xc0\xef\xef\x1f\xde\x7d\xfc\xfc\x0e\xd6\x32\x13\xd1\x68\x74\x88\x0b\x34\xbb\x5b\x29\xb8\x87\x6f\x23\x80\x1d\x9a\xd6\x33\xf8\x76\xbe\xc5\x17\xbd\xcf\xa4\x59\xee\xa5\x48\xc4\x32\x41\x23\x66\x06\x79\x99\x65\xa3\xf3\x7c\x34\x62\xa5\x48\xe6\x28\xb0\x52\x71\x91\xa2\xfe\xba\xcc\x13\x23\x55\x1e\x1e\x65\x6a\xb6\xb7\xb0\x15\xe4\xd6\x98\xed\xf2\x39\x22\xcb\x34\xca\x3d\x2e\x50\x1f\xd8\xb3\x88\x45\x91\xc6\xff\xf3\x86\x6a\x35\x91\x6c\x1f\x58\x7c\xad\x0a\x08\xc9\x4c\x85\xf4\x17\x73\xfc\x7b\xd3\xb0\xa1\x9a\x4c\xec\x31\x60\x0f\x79\xac\x16\xf5\x39\x44\x22\xa5\x42\x1d\x91\x72\x13\x06\x6f\x52\x79\x80\x24\x8b\xb5\xbe\x47\xda\xdb\x60\x6c\x65\x5a\xeb\x27\x6b\xfd\x84\xd6\xed\x9d\xe0\xe4\x8c\x3b\xf3\x8f\xa7\xc5\x85\x3d\xe2\xa1\xc1\x28\x36\xa6\x08\x83\x34\x36\xf1\xdd\x29\xb8\x85\x53\x87\x52\x21\xa5\x42\xca\x7e\x2f\xf2\xf4\x8b\x0a\xf1\x12\xe3\x28\x2d\xd4\x7e\x1f\xaf\x32\x11\x36\xe7\x60\x20\x54\x26\x8a\x38\x4f\xc4\x0c\x02\x99\x1b\x04\x8b\x48\x4c\x70\xdb\xf2\xe3\x24\x11\x7b\xcc\x48\x10\x19\x75\x17\x4c\x4e\x93\x00\x7f\x2b\x9f\x6f\xe4\x41\x3c\xd0\xcd\x50\xe8\x10\x67\x32\xbd\xa3\xec\x7a\x26\xe8\xd8\x99\x4b\x9b\x38\x88\xdc\xdc\x42\x29\x9d\xbb\xec\x32\x67\xfa\xa8\x23\x8d\x37\x0e\x7f\xfb\xfc\xe9\x63\xa4\x4d\x21\xf3\x8d\x5c\x57\xa1\x2f\xc8\xa2\x3b\x04\x36\x9e\xd7\x3b\x89\x2f\x54\x6c\x08\x59\x1d\x1a\x06\xbe\x50\x3b\xa4\x9e\x66\x30\x29\x25\x06\x22\xde\x6c\x28\x10\xdd\x20\x8e\x31\x66\x4f\x08\x54\xc1\xf8\x7c\xdb\xb3\x6b\x54\x6d\xf5\x26\x24\x48\x8d\x07\x0d\x0e\xf0\x86\x6c\x75\x2a\xc0\x86\xe3\xa2\x34\xe0\xfb\xf7\xde\x05\x8d\x38\x99\x70\xdc\x31\x75\xf6\xde\xce\xe3\x1a\x7a\x3e\xe3\x5c\xd3\xec\x3b\x62\xc3\x01\x25\x78\xc6\x75\x66\x01\x7b\x6e\x0b\xa8\x29\x2a\xfe\x9f\x7b\xa5\x99\x4a\xbc\x63\x5c\x2d\x77\x42\xeb\x78\x23\xfc\xfa\xdc\xe9\x8d\x4d\x31\xe2\xf7\x59\xcd\xd7\x08\x5c\xbe\x31\x31\x7d\x3b\x0a\xcf\x5f\x1e\xb5\xaf\xef\x4a\xba\x29\xdf\xd7\x4d\xb5\xd3\x33\x97\x2b\x73\x49\xcb\x96\x39\x3d\xe5\xe2\x08\x7f\x8a\xd5\x67\x95\x7c\x15\x26\x0c\x8e\x7a\x36\x9d\x06\x30\x81\x4c\x25\x31\xd9\x8d\xb6\x4a\x1b\x7c\x0f\xa6\x89\xca\x73\x42\xfb\x98\x4d\x21\xf4\x54\x3e\xe0\x06\xe3\xb5\xc1\x2a\x37\x98\x1d\xb5\x21\x46\xe8\x3e\xc6\x7a\xb1\x12\x11\xe5\xb5\x8e\xab\x3e\x4a\x93\x6c\x21\x44\xc9\xa8\x06\x6b\xdb\x38\x62\x6c\x9b\x16\xb7\xb3\x91\x8f\x7c\x22\xb1\x02\x01\xb8\xcd\xd9\xaa\x10\xf1\xd7\xb9\xa7\xb9\x89\x77\x62\x49\x8d\xb9\xa7\xde\xcb\x43\x6b\x29\xaa\x09\xad\x45\x4c\x46\xc4\x80\x0a\xc6\x0e\x45\xe1\x37\xd4\xa7\x07\x2c\x2a\x53\x94\xe2\x3c\x74\x01\x42\xcb\xd9\x85\x8a\x32\x76\x99\x2e\x66\x3e\x55\xc2\xae\x78\x31\x51\x4b\x72\xa7\x2d\xe0\x7e\xe9\x72\xda\x67\xf6\xcf\x15\x8b\x45\xc0\xac\xfe\x1f\xf9\xc8\x66\xb0\x8f\x5c\x50\xdc\xdc\xe8\x0d\x8b\x79\xd7\x15\x51\x14\xd8\x98\xfd\x9c\xb7\xe9\x52\xb9\xc6\x0e\x19\x65\x6a\x83\x50\x12\x2b\xcd\xa8\x02\x56\x40\x17\x10\x46\xa2\x31\xe6\xb0\x4c\xa9\xf4\xad\x71\x46\xd9\x20\xa3\x94\x87\x1f\x0d\xc2\x73\x77\xe2\x48\x3b\x13\x24\xce\x04\x9b\x39\x92\x8b\x32\x91\x6f\x68\x3e\x48\x37\x1f\x48\x78\x87\xc2\x4e\xea\x51\x2e\x6a\xc7\x89\x47\xcd\x0e\xd9\xbb\x88\x1e\xa2\x13\x61\xfd\x8e\xae\x5a\x13\x2a\x8f\xe0\xb5\x16\x37\xc5\x8c\x62\x6d\xa3\x3a\xba\xf8\x5a\xd5\x87\x38\x37\x1e\xc9\xe2\xa2\xa9\x3f\x9f\x84\x8d\xaa\x99\x8c\x7d\x5e\xb4\x2f\xf5\x36\x34\xca\xf5\x98\xa1\xb9\xe8\x06\x77\x67\x38\x0e\x0d\x68\x6f\x9a\x77\xa6\xb4\x75\x47\xff\x5d\xc6\x85\x68\xe2\xc5\x70\xc0\xb9\x8a\xd3\xb5\xf6\xc6\xad\x0d\xd4\xe0\x38\x83\xde\xfc\x6d\x85\x88\x16\xad\x25\x22\xdb\x15\x50\x21\xb8\x6c\xc7\xad\x90\x5c\x43\x68\xcf\xf3\x43\x0b\xf7\x78\x55\x7f\xdc\x21\xac\x8c\xcc\x4b\x31\x6f\xe1\xeb\xdd\x84\x15\x2f\xc6\x3e\x53\x79\xee\x37\xad\x9a\x2e\xd4\xd6\x29\xb3\x2f\x77\x82\xab\x6c\xbb\x20\xb4\xf7\xb6\x7c\xee\xcc\x97\xd7\xef\x5b\x49\x53\x9e\xf7\x61\x50\x87\xe1\x0a\xbb\x67\x28\x53\x85\x37\x76\xdc\x68\xd1\xc2\x2c\x29\x8a\x4b\x53\xed\x39\x94\xae\x90\x3a\xac\xcb\x5e\x33\x84\x9a\x7a\x8d\xf8\x4f\xb0\xb1\xb2\x57\x71\xe3\xe5\xc1\x3a\xf1\x68\x03\x7b\xcf\x6b\xd0\xc2\xbe\x55\xf8\x56\xe1\x9b\x8b\x02\x41\xc0\x46\xc2\x96\xee\x8f\x25\xff\x72\xe2\xd7\xb5\x35\xbc\x0a\x78\x79\x73\xc9\xc4\x05\x3d\xc9\x04\x1a\x53\x25\xb6\xaa\x93\xd4\x78\xdc\x06\xab\x5a\xfb\x70\xa7\x14\x71\x1b\xf2\xa1\xc1\x54\xc4\x18\x1f\x16\x4e\xff\xd2\x93\x69\xeb\xd7\x50\x9f\xaa\xad\x0c\x35\xa9\x26\x14\xb5\x08\x76\x28\x6c\xc7\xa9\x38\x7d\x5a\x87\x01\xad\x92\xe3\x8b\xb8\x34\x00\xb2\x45\x65\x31\xe4\xb4\x87\xd6\x18\x3f\x70\xe8\x5e\xb7\x0d\xd5\xab\x2a\xff\x5e\x04\x6f\xe1\x67\x0b\x55\xfd\x7b\xd8\x5b\x78\xb3\xd1\xbb\x61\x81\xb3\xbe\x30\xbc\x2b\xf3\xae\xdb\x59\x3e\xd5\x3e\x4e\xa4\xc1\x8d\xef\x45\xf4\xea\xa5\xcf\x70\xc3\x75\x1d\x67\x5a\x38\x47\x3c\xa7\x86\xc2\x8b\x17\xbb\x16\xda\xcb\x62\xe4\xfd\x1c\x35\xae\xc4\x0a\x04\x9e\xfc\x94\x97\xd7\x36\x80\xb3\x57\xb3\xbd\x4f\xb2\xaf\xa2\x5a\x6e\x71\x98\xe3\x27\xc4\xc0\xe6\x76\x13\xa6\x2a\x29\x77\xb4\x3d\x45\x6b\x7c\xd2\x35\x44\x7d\x3a\x5a\x48\xd5\x31\x0f\x87\xb7\x2d\x4a\x8e\x5d\xae\x50\xee\x81\x3e\x4b\xdf\xc2\x2f\xaf\xe1\xf9\x73\xe8\x52\xdf\xdc\xc3\xcb\x57\xde\xd7\xd3\x95\xdd\xf9\xbe\xa7\x76\x87\xc6\xe6\x4f\x6e\x51\xbc\xa8\xd5\x8d\xa0\x5e\xcc\x69\x18\x5e\x39\x60\xdc\x35\x76\xd1\xd8\xda\x38\x0e\xc6\xa1\xdc\xff\x5f\x51\xa0\xaf\xeb\x7f\xf1\x3b\xf8\x11\x5f\x08\x15\x37\xe1\x15\x5c\x44\x2b\x1a\x99\xcc\xa4\xed\xac\x91\xab\xf7\xfd\x1e\xf7\x9f\x00\x00\x00\xff\xff\x82\x4c\xd7\xb7\xc7\x10\x00\x00")

func comboJsBytes() ([]byte, error) {
	return bindataRead(
		_comboJs,
		"combo.js",
	)
}

func comboJs() (*asset, error) {
	bytes, err := comboJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.js", size: 4295, mode: os.FileMode(420), modTime: time.Unix(1435087496, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"combo.css": comboCss,
	"combo.html": comboHtml,
	"combo.js": comboJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"combo.css": &bintree{comboCss, map[string]*bintree{
	}},
	"combo.html": &bintree{comboHtml, map[string]*bintree{
	}},
	"combo.js": &bintree{comboJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

