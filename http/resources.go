// Code generated by go-bindata.
// sources:
// http/resources/combo.css
// http/resources/combo.html
// http/resources/combo.js
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _comboCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x08\x14\xbb\x04\x50\x9a\x14\xc8\x61\xde\x69\x28\x7a\x28\xb0\xec\xb2\xed\x03\x64\x89\xb1\x89\xc8\x52\x20\xc9\x4e\xd2\xa2\xff\x3e\xd2\x76\xba\x74\xab\x37\xec\x64\x99\x8f\x4f\x7c\xef\x89\xb7\x8b\x02\x16\x70\x1f\x0e\xe7\x48\x75\x93\xe1\x6e\xb5\xde\xc0\xb6\xa3\x08\x5b\xed\x2d\xc6\xb4\x04\xf8\xec\x1c\x0c\x68\x82\x88\x09\x63\x8f\x76\x29\xac\x1f\x09\x21\xec\x20\x37\x94\x20\x85\x2e\x1a\x04\x13\x2c\x02\xff\xd6\xa1\xc7\xe8\xd1\x42\x75\x06\x0d\xdb\xc7\xef\x2a\xe5\xb3\x43\x61\x39\x32\xe8\x99\x99\x1b\x9d\xc1\x68\x0f\x15\xc2\x2e\x74\xde\x02\x79\x2e\x22\x7c\x79\xbc\x7f\xf8\xfa\xed\x01\x76\xe4\x50\xe6\xdc\x16\x0b\x78\x2e\x00\xaa\x70\x52\x89\x9e\xc8\xd7\x25\x9f\x23\x8b\x53\x5c\xfa\xc4\x88\x3a\x62\xb5\xa7\xac\x72\xe8\x4c\xa3\x8c\x76\x2e\x74\xb9\x04\x1f\x3c\x5e\xc3\x1d\x6b\x57\x09\x1d\x9a\x6b\x70\xdf\xe4\xd6\xcd\x60\x6d\x78\x9a\x43\xd2\xfb\xc0\x3b\xc5\x97\xa2\xb8\xa9\x82\x8e\x76\x70\x71\x24\x9b\x9b\x12\x3e\x6e\xfa\x96\xbc\x30\x1a\x94\x68\xaf\x2b\xa3\xb9\x12\xd6\x87\x13\xe7\xea\x88\x53\x74\xda\xec\x05\xb2\x94\x0e\x4e\x9f\x4b\xd8\x39\x3c\xbd\x29\x5c\x4c\x5e\x00\xf9\x2a\x4b\x91\x85\x50\xf0\x25\xbf\x8c\xeb\x5a\x7f\x1d\xc7\x5c\x07\xeb\x5d\xc6\x70\x1c\xd4\x4a\x0f\x0b\xf9\x9d\x36\x95\x26\x2f\xeb\xd5\xea\xc3\xff\x88\x93\x01\x06\x79\xa9\xfe\x3d\xe1\x2f\x51\x54\xfc\xad\xa3\x2c\x8e\x62\xe5\x81\x9b\x4c\x13\xf8\xa4\xf3\xf0\x10\xbb\xe0\xb3\xac\x0b\x8a\xbe\x4b\xb2\x19\x4f\x59\x69\x47\xb5\xd8\x45\x9f\x31\x8e\x6a\x0e\x84\xbc\xbc\xcf\xaf\x03\x55\xd4\x96\xba\x54\xc2\x46\x9c\x49\xc7\xb1\xa1\x3c\x75\xfc\x31\x77\xc0\xe4\xfa\xe9\x7f\x92\x28\xb4\xe1\x38\x43\x7b\x75\xf2\xf6\x1a\xa1\xf5\xac\xd1\xf2\xf6\xf5\x73\x23\xeb\x88\x38\x3e\xd5\x4d\x8b\x29\xe9\x1a\xd3\x98\xe6\x2f\xd7\x77\xa3\xe9\x97\xe2\x67\x00\x00\x00\xff\xff\xa8\x42\xd6\x64\xe3\x03\x00\x00")

func comboCssBytes() ([]byte, error) {
	return bindataRead(
		_comboCss,
		"combo.css",
	)
}

func comboCss() (*asset, error) {
	bytes, err := comboCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.css", size: 995, mode: os.FileMode(420), modTime: time.Unix(1435112021, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _comboHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x91\xbd\x8e\xdb\x30\x10\x84\x7b\x3d\xc5\x46\xbd\xc8\xc8\x48\x9a\x80\x32\x10\x18\x2e\x0c\xc4\x69\x92\x3c\x00\x45\xae\xa4\x75\x28\x52\xe1\x52\x86\xf5\xf6\xa1\xa4\xc3\x1d\x0e\x57\x5c\x71\x15\x31\x33\x3b\x1f\xff\xd4\xa7\xaa\x2a\x4e\x61\x5a\x22\xf5\x43\x82\xc3\xe7\xfa\x2b\x5c\x67\x8a\x70\xd5\xde\x62\x64\x01\xf0\xdd\x39\xd8\x52\x86\x88\x8c\xf1\x8e\x56\x14\x7f\x18\x21\x74\x90\x06\x62\xe0\x30\x47\x83\x60\x82\x45\xc8\xb2\x0f\x77\x8c\x1e\x2d\xb4\x0b\x68\xb8\x5e\x7e\x57\x9c\x16\x87\x85\x23\x83\x3e\xd7\xd2\xa0\x13\x18\xed\xa1\x45\xe8\xc2\xec\x2d\x90\xcf\x26\xc2\x8f\xcb\xe9\xfc\xf3\xd7\x19\x3a\x72\x28\x8a\xaa\x3a\x16\x6a\x48\xa3\x5b\x17\xd4\xf6\x58\x00\x28\x47\xfe\x6f\x3e\x85\x6b\xca\x8d\xc9\x03\x62\x2a\x21\x2d\x13\x36\x65\xc2\x47\x92\x86\xb9\x84\x21\x62\xd7\x94\x26\x8c\x6d\x10\xab\xb1\x55\xd9\x44\x9a\x12\x70\x34\x4d\x39\xa4\x34\xf1\x37\x29\xf5\x4d\x3f\x44\x1f\x42\xef\x50\x4f\xc4\x22\x57\x36\x4f\x3a\x6a\x59\xde\xfe\xcd\x18\x17\x79\x10\xb5\xf8\xf2\x24\xc4\x48\x5e\xdc\x32\x51\xc9\x9d\xf7\x21\xf4\x4c\xb2\x16\xf5\x0b\xbd\x9a\xe9\xfd\x0d\xe4\x7e\xaf\x37\x33\x89\x92\xc3\xe3\x69\x0d\x95\xdc\x45\xa1\xe4\xfe\x72\xaa\x0d\x76\xd9\xa6\x2c\xdd\x81\x6c\x53\xb6\x41\x47\xbb\x12\xb2\xf1\x2a\x18\x91\x59\xf7\xc8\xcf\x99\x92\x7b\x39\xb3\xb6\xcf\xf8\x1f\x00\x00\xff\xff\x85\x2a\xb4\x5f\x32\x02\x00\x00")

func comboHtmlBytes() ([]byte, error) {
	return bindataRead(
		_comboHtml,
		"combo.html",
	)
}

func comboHtml() (*asset, error) {
	bytes, err := comboHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.html", size: 562, mode: os.FileMode(420), modTime: time.Unix(1434758159, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _comboJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\xdd\x6f\xe3\xb8\x11\x7f\xf7\x5f\xc1\xea\x82\x83\x84\xd8\xca\x5e\xd1\xc5\x1d\xec\xe4\x80\x22\xb8\x87\x2b\xba\xb7\x0f\xbb\x45\x1f\xd2\xc0\x90\x25\xda\x26\x22\x89\x2a\x49\xc5\x16\x76\xfd\xbf\x77\x86\x94\x44\x52\x1f\xf9\x00\x7a\x7e\xb0\xa4\x19\x72\xc8\x99\xf9\xcd\x07\x79\x73\x43\xee\x79\xd5\x08\x76\x38\x2a\xf2\xd7\x0f\x3f\x7d\x24\x9f\x6a\x26\xc8\xa7\xa4\xcc\xa8\x90\x31\x21\x7f\xcf\x73\xa2\xb9\x92\x08\x2a\xa9\x78\xa6\x59\xbc\x80\x59\xff\x92\x94\xf0\x3d\x51\x47\x26\x89\xe4\xb5\x48\x29\x49\x79\x46\x09\x7c\x1e\xf8\x33\x15\x25\xcd\xc8\xae\x21\x09\xf9\xf4\xfb\xd7\x95\x54\x4d\x4e\x71\x56\xce\x52\x5a\xc2\x4c\x75\x4c\x14\x49\x93\x92\xec\x28\xd9\xf3\xba\xcc\x08\x2b\x81\x48\xc9\x3f\x7f\xbf\xff\xed\x8f\x2f\xbf\x91\x3d\xcb\x69\xbc\x58\x3c\x27\x02\xc4\x16\x3b\x4e\xee\xc8\xb7\x05\x21\x05\x88\x96\x6b\xf2\xed\xb2\x84\x0f\x59\xe5\x4c\x6d\x2b\x46\x53\xba\x4d\x41\x88\x5a\x93\xb2\xce\xf3\xc5\x65\xb3\x58\xe8\x49\x31\x2b\x61\xc0\x8e\x27\x22\x83\xf9\xfb\xba\x4c\x15\xe3\x65\x78\x62\x99\x3a\x2e\xc9\x91\xa2\x5a\x91\x96\xab\xd7\xa1\x79\x2e\x61\xdc\xc3\x23\xcc\x27\x5a\xb3\x58\x0f\x05\x9a\x7e\x6e\x3a\xaa\x99\x09\x64\xf3\xa2\x87\xef\xb9\x20\x21\x8a\x69\x80\xfe\x61\x03\x8f\xdb\x8e\x4d\x9a\xeb\x6b\xb3\x0c\x31\x8b\x3c\x34\x8f\xed\x3a\x48\xc2\x49\x82\x9f\x80\x72\x15\x06\xb7\x19\x7b\x26\x69\x9e\x48\x79\x07\xb4\x5f\x83\xc8\x8c\xe9\xa5\x9f\x8d\xf4\x33\x48\x37\x7b\x22\x67\x2b\xdc\x8a\x7f\x38\x3f\x8e\xe4\x21\x0f\x04\xc6\x89\x52\x22\x0c\xb2\x44\x25\xab\x73\xb0\x24\x67\x8f\xd2\x00\xa5\x01\x4a\x55\xd1\x32\xfb\xca\x43\xd8\x44\x14\x67\x82\x57\x55\xb2\xcb\x69\xd8\xad\x03\x86\xe0\x39\x15\x49\x99\xd2\x35\x09\x58\xa9\x00\x2c\x34\x55\xc1\xb2\xe7\x27\x69\x4a\x2b\xf0\x48\x10\x2b\xbe\x0a\xae\xcf\xd7\x01\xfc\x37\x96\x8f\x32\xd7\xd6\x27\xf4\x99\x96\x6a\x49\x6a\x66\x75\xc1\x5f\xcd\x60\xf1\xe4\x70\xc0\xc5\xe3\x24\xcb\xee\x51\x13\xd8\x2a\x6e\x88\x66\x68\x1d\x67\x30\xe0\x2b\x79\xe6\x2c\x23\x1a\x12\x64\x0f\x60\x7b\xa2\x82\x9c\x8e\xb4\xd4\xcb\x55\xac\x3c\x00\x20\x0d\x17\x00\xae\x01\x77\xa4\x79\x05\x83\x32\x26\x51\xe7\x44\x48\x7f\x75\xc3\x8e\xd3\x9c\x97\x34\x74\xec\x62\x59\x55\x22\x60\xeb\x61\xe4\xef\xc5\xe0\xef\x24\x63\x09\xe3\xc3\x7f\x7c\xf9\xfc\x47\x2c\x95\x80\x0d\xb0\x7d\x13\xba\x1a\xea\xa1\x05\xec\x06\x4c\x85\xe8\x76\x4c\xa8\xcd\x28\x0e\x88\x77\x8f\x06\x70\x10\xbc\x00\xea\x79\x4d\xae\x7d\x0b\xb9\xae\x8d\xc0\x93\x2f\x0c\x68\x82\xe8\xb2\x1c\xc8\x55\xbc\x95\x7a\x15\x22\xd0\xa3\x49\x81\x13\xbc\x29\x59\x5e\x5c\x1a\x73\x8c\x02\x96\x7c\xff\x3e\xbf\x41\x3d\x22\x88\x3c\xb1\x17\xe7\xeb\x12\xb5\xc1\xe1\x32\x2e\x2d\xcd\x7c\x03\x7a\xad\xcb\x82\x1f\x74\x26\x30\x21\x75\xe9\x43\xbc\x0b\x7b\xfd\xdc\x38\xc9\x03\x20\x51\xe5\x49\xb3\x2d\xa8\x94\xc9\x81\xba\x19\xa4\x90\x07\x83\x53\x88\xb0\x1f\x5a\xbe\x84\xd0\x52\xf4\xac\x34\xd3\x95\xc3\x61\xfd\xed\x49\xba\xf3\x6d\xd2\xe9\x12\xcc\x2f\x5d\x3e\xc2\x77\x8d\x24\xcd\xc5\x59\x26\x11\xe1\x5b\x49\x4f\xe4\xdf\x74\xf7\x85\x03\xae\x55\x18\x9c\xe4\xfa\xe6\x26\x20\xd7\x24\xe7\x69\x82\x72\xe3\x23\x97\x0a\xbe\x83\x9b\x94\x97\x25\xc6\xa3\x01\x25\xc0\x90\x97\x13\x6a\xe8\xa0\xeb\x02\x4e\xa7\xc0\x02\x13\xa5\x46\x2b\xc0\x5a\x52\x33\x22\x46\x77\xb4\x76\x95\x27\xa6\xd2\x23\x09\x61\x64\xdc\x02\xb7\x4f\x6d\x09\x24\x76\x83\xe1\xf5\xc2\x8d\x02\x24\xe9\x09\x08\xe6\xde\x67\x3b\x41\x93\xa7\x8d\x33\xf3\x90\x14\x74\x8b\xa5\x63\x30\x7d\xe0\x87\x5e\x52\xdc\x12\x7a\x89\xe0\x8c\x58\x83\x2b\x88\x2c\xa2\xc2\x6f\x18\xda\xf0\x02\x01\xa6\x44\x4d\x2f\x53\x1b\x40\xb4\x5c\xac\xa9\xd0\x63\x63\x77\x69\xe6\x4b\xe1\x6c\x03\x19\x1c\xb5\x45\x75\xfa\x60\x1e\x86\xb1\x76\xfb\xda\x3c\x6c\xe0\x18\x04\xac\xdb\xe7\xc2\x45\xf6\xa5\xcf\x2f\xc3\xca\x36\x28\x67\x1b\x5f\x15\x2a\x04\x94\x0e\xd7\xe7\xbd\xbb\x78\x29\x21\x87\xc7\x39\x3f\x00\x94\xe8\x4e\x6a\x54\x11\x3d\x01\x54\x00\x18\xd1\x4e\x98\xc5\x32\xba\xd2\x95\xa6\x3d\xaa\x05\x6a\x94\xea\xf2\x8c\xa5\xfa\xe2\xd7\x44\x66\xaa\x16\x83\xaa\x65\x3c\x87\xe3\xe2\x9c\x96\x07\xac\x60\xcc\x56\x30\x1c\x5c\xc0\x60\x3b\xea\x81\x3d\xb6\x8a\x23\x0f\x13\x1f\xb0\x8b\x18\x5f\xe2\x33\x62\x7d\x85\x5b\x6d\x09\x8d\x43\x70\xd2\x4c\x2b\xc0\x6e\xf1\x01\x47\x3f\x76\xb1\xe5\x92\x20\x21\x75\x75\x79\xc8\x8b\xab\x5a\x1e\xc3\x02\xea\x99\xcd\x20\x53\x75\xd9\x36\x0e\x5e\x71\x9e\x6a\x10\x9c\x6e\xc2\xeb\x12\x8c\xb2\xf2\xbf\x35\xd4\x96\xce\x1a\xda\xd9\x50\xd7\xa1\xba\xf7\x95\xa6\x6b\x5b\x30\x7d\x69\xff\x38\xf5\xbf\x1f\x84\xb4\x78\xcf\x00\xb7\x36\x3c\x04\xd5\x41\x69\x6b\x16\xdb\x93\xd0\xac\xe7\x1a\x8e\xdc\xc1\x56\xdd\x8a\x0c\xa0\x51\xac\xac\xe9\xa6\x07\xa7\xb3\x13\x53\x58\x87\x6d\x87\xa6\xea\xbe\xa3\x4b\xc4\xb8\xa1\x3e\x0a\x35\x7b\xdc\x93\xcc\xb2\x4d\x83\x32\xcb\x36\x45\x63\x49\xc6\xba\xbc\x34\x27\xe7\x62\x3c\x07\x88\xd6\x3e\x66\x92\xce\xef\xaf\x8b\xee\xfb\x94\xd6\xdc\x33\xec\xc9\xf5\xfa\x74\xd4\x17\x28\x49\xd5\x16\xbd\xb5\x55\x4d\xa5\x5d\x66\xc3\xd1\x63\x8d\x33\xd6\x14\x3a\xdb\xc6\xe4\x4d\xf0\x34\x63\x67\xf1\xe9\xf8\xdb\x28\xf1\x60\x1c\x78\xa7\xdb\xbd\x47\xf3\xd5\xc0\x57\x03\x5f\xd6\x0a\x08\x35\x63\x09\x93\x00\xde\x07\xb2\x71\x0f\xd1\x46\xf1\x74\x73\x31\x03\x10\xeb\x58\x68\x1a\xd3\x1c\xfa\x3e\xc2\x6b\x48\x7e\x67\x26\x15\x76\x89\x8a\x4b\x37\xc4\xd0\x5d\x3a\xb1\xb9\xe2\x34\x15\x70\xad\x17\x0e\x6f\xfe\x23\xaf\x6f\x7a\x1d\xa7\x32\x5f\x2b\x65\x2a\xed\x75\x66\x69\x87\x40\xce\x83\x04\x9f\xd1\xf3\xe7\x7d\x18\x60\xfb\x1c\x8d\x6c\xd4\x81\xc9\x04\xb2\xc1\x93\x9d\x3d\xd5\x18\xb9\x46\x64\x72\xab\x0b\x24\xaa\xda\x29\x75\x4c\x64\x8b\xda\x9a\xad\xfa\xf2\xb9\xea\xc6\x05\x7e\xae\x70\x24\xb8\xdb\x42\x28\x3c\x27\x39\xcb\x56\xba\x0f\x88\xbc\xfd\x05\x2e\xc7\xe9\x96\x75\xee\x19\x79\xef\x76\xde\x79\x53\x86\x90\x47\x7e\x82\x06\x3d\xc5\x75\x78\x95\xa4\x4c\x61\xa6\xf8\x10\xff\xfc\xb1\x6d\xcb\x66\xa5\xad\x46\x6b\x3b\xe6\x33\x2a\x79\x16\x31\x7d\x7f\xd7\xed\xbd\x34\xf9\x42\x68\x0e\x9d\x8d\xb3\xd9\xd6\xd4\x2c\xd3\x81\xfc\x86\x35\x5a\xb5\x5e\x5f\x6a\x31\xb3\xa4\x93\xb8\x66\xcd\x39\x19\x68\x10\x02\x7e\x81\x6c\x8f\x70\xfa\x7f\xb4\x95\x47\x37\xba\x61\x6a\x34\xda\x82\xd3\x91\x39\xd6\x15\xd0\x61\x0a\xa5\xcf\x90\x1a\x1d\xde\xf1\xa7\xf5\xe3\x5a\xbb\xd1\x65\xd8\x96\x6e\x9f\x80\xba\x2e\xcb\x58\x0e\x04\xea\x23\x9b\x27\x4e\xaa\x04\x97\x0a\xfb\x2c\x09\xfb\x5c\x8e\x13\x4a\x34\x38\x6e\x09\xaa\x6a\x51\xbe\x7a\x54\xed\xec\x56\x98\x94\xa8\xcf\x48\xde\x91\x10\x7f\x85\x1f\xb1\x33\x07\x59\xfc\xe1\x61\x36\x7d\x1a\x10\xed\xa9\x53\x27\xf0\x10\xc4\x99\x97\x28\x6a\xd3\x34\x92\xda\xb7\xc8\x83\xb1\x3f\xdd\x96\xa8\x49\xd8\x8d\x76\x33\x1b\xa2\xc5\xeb\xf1\xd9\x6b\x6e\xc2\x70\x72\x06\x59\x4d\xf8\x61\x32\x98\x87\x3a\xb9\x5a\xbd\x1a\x25\xe6\x37\x0e\x4b\xbb\xc7\x51\x68\x9a\x19\x43\x7b\x4c\xe5\x77\x40\xd3\x5c\x6e\xef\x7e\x18\xe7\xd8\xfd\xd8\x42\x09\x93\x30\xdb\xfb\xf5\xb2\x25\x9a\xb2\xe9\xf8\xca\xcf\x9f\xc3\x2d\x7a\x5f\x1b\xef\xa0\x3c\x87\xf4\xe5\xc2\x0b\x8f\xb7\xdc\xc8\x4c\x81\xdc\xe5\x22\x52\xfe\x52\xb8\xe5\xa4\xc7\xf8\xd8\x22\xc5\x5c\xde\xfe\x69\xa4\x5f\x87\x9f\x69\xc0\x6d\x66\x6f\x09\xde\x57\x93\xa6\x64\x5c\xdc\x70\x78\xb7\xe3\x87\x2d\xa1\xbe\x0d\xeb\xbc\xde\x1f\x57\x3a\x8f\x7b\x5b\x78\xa1\xce\x76\x7a\xfd\x09\x60\xba\xbc\xb5\xa6\xbc\xe1\x88\x7d\x71\xda\xd9\xc1\xad\xec\x13\x6d\xb6\x47\x38\x2d\xe7\x54\x4c\x5c\x8d\x5c\x85\x19\x4f\xeb\x02\xaf\x27\xe2\x3d\xbc\xc9\xf6\xa8\xe2\xd2\x41\x42\xc6\x4f\x65\x38\x7d\x9d\x81\xc6\x33\xb7\x17\x30\xee\x1e\x6f\xa6\x7f\x25\x7f\xfb\x85\xfc\xf8\x23\xf1\xa9\xb7\x77\xe4\xe3\xcf\xd6\xb4\xba\x0b\x9b\xb9\xac\x82\x1e\xcc\x9f\xbb\x02\x89\xae\x57\x4c\xa5\xf0\x95\x27\xb3\x77\x5f\x53\xd2\x36\x2f\xde\x7c\xe8\xcb\x95\xb6\xed\x6e\x2f\xd6\x10\x3c\x33\x0b\x44\xbe\xb0\xd1\x31\xa2\x77\xcd\xa4\x69\xeb\xea\xff\x6b\xd8\x79\x2b\xe0\x9d\xfd\x2b\x7a\x07\xef\xd1\x05\x81\x76\x15\xce\x40\x2d\xde\xe1\x41\x58\x33\x31\x6b\x74\xe3\xda\x3b\xba\x01\xf7\x7f\x01\x00\x00\xff\xff\xa0\x1a\x19\x08\x1d\x19\x00\x00")

func comboJsBytes() ([]byte, error) {
	return bindataRead(
		_comboJs,
		"combo.js",
	)
}

func comboJs() (*asset, error) {
	bytes, err := comboJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.js", size: 6429, mode: os.FileMode(420), modTime: time.Unix(1435123530, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"combo.css": comboCss,
	"combo.html": comboHtml,
	"combo.js": comboJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"combo.css": &bintree{comboCss, map[string]*bintree{
	}},
	"combo.html": &bintree{comboHtml, map[string]*bintree{
	}},
	"combo.js": &bintree{comboJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

